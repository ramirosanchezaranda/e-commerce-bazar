---
// src/components/CartModal.astro
interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

interface Props {
  isOpen?: boolean;
}

const { isOpen = false } = Astro.props;
---

<div 
  id="cart-modal"
  class={`fixed inset-0 z-[100] bg-black bg-opacity-50 items-center justify-center ${isOpen ? 'flex' : 'hidden'}`}
>
  <div class="bg-white rounded-lg shadow-xl p-8 w-[500px] relative max-h-[90vh] flex flex-col">
    <button 
      id="close-cart-modal" 
      class="absolute top-4 right-4 text-gray-600 hover:text-gray-900"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Carrito de Compras</h2>

    <div id="cart-items" class="flex-grow overflow-y-auto space-y-4 mb-4">
      <!-- Cart items will be dynamically inserted here -->
      <p id="empty-cart-message" class="text-center text-gray-500">Tu carrito está vacío</p>
    </div>

    <div class="border-t pt-4">
      <div class="flex justify-between mb-4">
        <span class="text-lg font-semibold">Total:</span>
        <span id="cart-total" class="text-lg font-bold text-blue-600">$0.00</span>
      </div>

      <button 
        id="checkout-button"
        class="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
        disabled
      >
        Proceder al Pago
      </button>
    </div>
  </div>
</div>

<script>
  class CartManager {
    private items: CartItem[] = [];
    private cartItemsContainer: HTMLElement;
    private cartTotalElement: HTMLElement;
    private checkoutButton: HTMLButtonElement;
    private emptyCartMessage: HTMLElement;

    constructor() {
      this.cartItemsContainer = document.getElementById('cart-items')!;
      this.cartTotalElement = document.getElementById('cart-total')!;
      this.checkoutButton = document.getElementById('checkout-button') as HTMLButtonElement;
      this.emptyCartMessage = document.getElementById('empty-cart-message')!;
      
      this.loadCart();
      this.setupEventListeners();
    }

    private loadCart() {
      const savedCart = localStorage.getItem('cart');
      if (savedCart) {
        this.items = JSON.parse(savedCart);
        this.renderCart();
      }
    }

    private saveCart() {
      localStorage.setItem('cart', JSON.stringify(this.items));
    }

    addToCart(product: CartItem) {
      const existingItem = this.items.find(item => item.id === product.id);
      
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        this.items.push({ ...product, quantity: 1 });
      }

      this.saveCart();
      this.renderCart();
    }

    removeFromCart(productId: string) {
      this.items = this.items.filter(item => item.id !== productId);
      this.saveCart();
      this.renderCart();
    }

    updateQuantity(productId: string, quantity: number) {
      const item = this.items.find(item => item.id === productId);
      if (item) {
        item.quantity = quantity;
        if (item.quantity <= 0) {
          this.removeFromCart(productId);
        } else {
          this.saveCart();
          this.renderCart();
        }
      }
    }

    private renderCart() {
      this.cartItemsContainer.innerHTML = '';
      
      if (this.items.length === 0) {
        this.emptyCartMessage.style.display = 'block';
        this.checkoutButton.disabled = true;
        this.cartTotalElement.textContent = '$0.00';
        return;
      }

      this.emptyCartMessage.style.display = 'none';
      this.checkoutButton.disabled = false;

      let total = 0;
      this.items.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;

        const cartItemElement = document.createElement('div');
        cartItemElement.classList.add('flex', 'items-center', 'space-x-4', 'p-4', 'border-b');
        cartItemElement.innerHTML = `
          <img src="${item.image}" alt="${item.name}" class="w-20 h-20 object-cover rounded">
          <div class="flex-grow">
            <h3 class="font-semibold">${item.name}</h3>
            <p class="text-gray-600">$${item.price.toFixed(2)}</p>
          </div>
          <div class="flex items-center space-x-2">
            <button data-decrease="${item.id}" class="bg-gray-200 px-2 rounded">-</button>
            <span>${item.quantity}</span>
            <button data-increase="${item.id}" class="bg-gray-200 px-2 rounded">+</button>
          </div>
          <button data-remove="${item.id}" class="text-red-500 hover:text-red-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </button>
        `;
        this.cartItemsContainer.appendChild(cartItemElement);
      });

      this.cartTotalElement.textContent = `$${total.toFixed(2)}`;

      // Add event listeners for quantity and remove buttons
      this.cartItemsContainer.querySelectorAll('[data-decrease]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = (e.currentTarget as HTMLButtonElement).dataset.decrease!;
          const item = this.items.find(i => i.id === productId);
          if (item) {
            this.updateQuantity(productId, item.quantity - 1);
          }
        });
      });

      this.cartItemsContainer.querySelectorAll('[data-increase]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = (e.currentTarget as HTMLButtonElement).dataset.increase!;
          const item = this.items.find(i => i.id === productId);
          if (item) {
            this.updateQuantity(productId, item.quantity + 1);
          }
        });
      });

      this.cartItemsContainer.querySelectorAll('[data-remove]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = (e.currentTarget as HTMLButtonElement).dataset.remove!;
          this.removeFromCart(productId);
        });
      });
    }

    private setupEventListeners() {
      const cartButton = document.querySelector('[data-cart-button]');
      const cartModal = document.getElementById('cart-modal');
      const closeCartButton = document.getElementById('close-cart-modal');

      if (cartButton && cartModal && closeCartButton) {
        cartButton.addEventListener('click', () => {
          cartModal.classList.remove('hidden');
          cartModal.classList.add('flex');
        });

        closeCartButton.addEventListener('click', () => {
          cartModal.classList.remove('flex');
          cartModal.classList.add('hidden');
        });

        // Close modal when clicking outside
        cartModal.addEventListener('click', (event) => {
          if (event.target === cartModal) {
            cartModal.classList.remove('flex');
            cartModal.classList.add('hidden');
          }
        });
      }
    }
  }

  // Initialize cart manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const cartManager = new CartManager();

    // Expose addToCart method globally so it can be called from product components
    window.addToCart = (product: CartItem) => {
      cartManager.addToCart(product);
    };
  });
</script>
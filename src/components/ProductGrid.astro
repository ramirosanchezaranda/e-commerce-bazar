---
const { products } = Astro.props;

// Función para formatear el precio
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('es-AR', {
    style: 'currency',
    currency: 'ARS'
  }).format(price);
};

// Validar que products sea un array
if (!Array.isArray(products)) {
  throw new Error('La prop "products" debe ser un array');
}
---

<div class="container mx-auto px-4 py-8">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" role="grid">
    {products.map(product => (
      <article 
        class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden"
        data-product-id={product.id}
      >
        <div class="aspect-w-16 aspect-h-9 relative">
          <img 
            src={product.imagen_url} 
            alt={`Imagen de ${product.nombre}`}
            class="w-full h-48 object-cover"
            loading="lazy"
            onerror="this.onerror=null; this.src='/images/placeholder.jpg';"
          />
        </div>
        <div class="p-4">
          <h3 class="font-semibold text-lg mb-2">{product.nombre}</h3>
          {product.descripcion && (
            <p class="text-gray-600 text-sm mb-3 line-clamp-2">{product.descripcion}</p>
          )}
          <p class="text-blue-600 font-bold text-xl mb-4" aria-label={`Precio: ${formatPrice(product.precio)}`}>
            {formatPrice(product.precio)}
          </p>
          <button 
            type="button"
            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            aria-label={`Agregar ${product.nombre} al carrito`}
            data-product={JSON.stringify({
              id: product.id,
              name: product.nombre,
              price: product.precio,
              image: product.imagen_url,
              quantity: 1
            })}
          >
            Agregar al carrito
          </button>
        </div>
      </article>
    ))}
  </div>
</div>

<script>
  // Manejo seguro de eventos del carrito
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('button[data-product]');
    
    buttons.forEach(button => {
      button.addEventListener('click', (e) => {
        try {
          if (button instanceof HTMLElement && button.dataset.product) {
            const productData = JSON.parse(button.dataset.product);
            
            if (typeof window.addToCart === 'function') {
              window.addToCart(productData);
            } else {
              console.error('La función addToCart no está definida');
            }
          }
        } catch (error) {
          console.error('Error al procesar datos del producto:', error);
        }
      });
    });
  });

  // Manejo de errores de imágenes
  const handleImageError = (img: HTMLImageElement) => {
    img.onerror = null;
    img.src = '/images/placeholder.jpg';
    img.alt = 'Imagen no disponible';
  };
</script>

<style>
  /* Estilos para truncar descripción */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Mejora de accesibilidad para focus */
  button:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
</style>